const axios = require('axios');

function convertToBold(text) {
  const boldMap = {
    'a': 'ùóÆ','b': 'ùóØ','c': 'ùó∞','d': 'ùó±','e': 'ùó≤','f': 'ùó≥','g': 'ùó¥','h': 'ùóµ','i': 'ùó∂','j': 'ùó∑',
    'k': 'ùó∏','l': 'ùóπ','m': 'ùó∫','n': 'ùóª','o': 'ùóº','p': 'ùóΩ','q': 'ùóæ','r': 'ùóø','s': 'ùòÄ','t': 'ùòÅ',
    'u': 'ùòÇ','v': 'ùòÉ','w': 'ùòÑ','x': 'ùòÖ','y': 'ùòÜ','z': 'ùòá',
    'A': 'ùóî','B': 'ùóï','C': 'ùóñ','D': 'ùóó','E': 'ùóò','F': 'ùóô','G': 'ùóö','H': 'ùóõ','I': 'ùóú','J': 'ùóù',
    'K': 'ùóû','L': 'ùóü','M': 'ùó†','N': 'ùó°','O': 'ùó¢','P': 'ùó£','Q': 'ùó§','R': 'ùó•','S': 'ùó¶','T': 'ùóß',
    'U': 'ùó®','V': 'ùó©','W': 'ùó™','X': 'ùó´','Y': 'ùó¨','Z': 'ùó≠',
  };
  return text.split('').map(char => boldMap[char] || char).join('');
}

function splitMessage(text, maxLength) {
  const lines = text.split('\n');
  const chunks = [];
  let chunk = '';

  for (const line of lines) {
    if ((chunk + '\n' + line).length > maxLength) {
      chunks.push(chunk);
      chunk = line;
    } else {
      chunk += (chunk ? '\n' : '') + line;
    }
  }

  if (chunk) chunks.push(chunk);
  return chunks;
}

const responseOpeners = ["ùóîùóøùó∂ùóÆ ùóîùóú"];

module.exports.config = {
  name: 'aria',
  version: '1.1.1',
  hasPermission: 0,
  usePrefix: false,
  aliases: ['aria', 'ariaai'],
  description: "Aria AI via Kaiz API",
  usages: "ai2 [prompt]",
  credits: 'LorexAi',
  cooldowns: 0
};

module.exports.run = async function({ api, event, args }) {
  const prompt = args.join(' ');
  const uid = event.senderID;
  const threadID = event.threadID;
  const messageID = event.messageID;

  // Require reply sa message para magpatuloy
  if (!event.messageReply) {
    return api.sendMessage(
      "‚ùå Pakisagot muna ang isang mensahe gamit ang command na ito.",
      threadID,
      messageID
    );
  }

  if (!prompt) {
    return api.sendMessage(
      "üåüGreetings! I am ùó†ùó≤ùòÄùòÄùóÆùóªùó±ùóøùóÆ, your gateway to GPT‚Äë4 intelligence. I am here to assist you.",
      threadID,
      messageID
    );
  }

  const originalMessage = event.messageReply.body || "[Walang laman ang ni-reply-an na mensahe]";
  const fullPrompt = `${prompt}\n\n${convertToBold('üìå Original message:')}\n${originalMessage}`;

  const loadingMsg = await new Promise(resolve => {
    api.sendMessage("üîÑ Searching...", threadID, (err, info) => resolve(info));
  });

  try {
    const url = `https://kaiz-apis.gleeze.com/api/aria?ask=${encodeURIComponent(fullPrompt)}&uid=${uid}&apikey=5ce15f34-7e46-4e7e-8ee7-5e934afe563b`;
    const { data } = await axios.get(url);

    const raw = data?.response;
    if (!raw || raw.trim() === '') {
      return api.editMessage("‚ö†Ô∏è No response received from Aria API.", loadingMsg.messageID, threadID);
    }

    const formatted = raw
      .replace(/\*\*(.*?)\*\*/g, (_, t) => convertToBold(t))
      .replace(/##(.*?)##/g, (_, t) => convertToBold(t))
      .replace(/###\s*/g, '')
      .replace(/\n{3,}/g, '\n\n');

    const opener = responseOpeners[Math.floor(Math.random() * responseOpeners.length)];
    const fullMessage = `${opener}\n\n${formatted}`;

    await api.unsendMessage(loadingMsg.messageID);

    const chunks = splitMessage(fullMessage, 1800);
    for (const chunk of chunks) {
      await api.sendMessage(chunk, threadID);
    }

  } catch (error) {
    console.error("‚ùå Aria API Error:", error.message);
    return api.editMessage("‚ùå Error while contacting Aria API.", loadingMsg.messageID, threadID);
  }
};
