const fs = require("fs");
const path = require("path");

module.exports.config = {
  name: "gage",
  version: "2.1",
  hasPermission: 0,
  usePrefix: false,
  aliases: ["agg", "gagstock"],
  description: "Auto-post GagStock tracker every 3 minutes with user score, medals, and image attachments. Use 'on' or 'off' to toggle.",
  usages: "[on|off]",
  cooldowns: 0,
};

const usersScore = {};
const medals = [
  { score: 200, emoji: "ü•á Gold Medal" },
  { score: 100, emoji: "ü•à Silver Medal" },
  { score: 50, emoji: "ü•â Bronze Medal" },
];

const fruitsList = [
  { name: "üçé Apple", price: 25 },
  { name: "üçå Banana", price: 15 },
  { name: "üçä Orange", price: 30 },
  { name: "üçâ Watermelon", price: 50 },
  { name: "üçá Grapes", price: 40 },
  { name: "ü•≠ Mango", price: 35 },
  { name: "üçç Pineapple", price: 45 },
  { name: "üçà Melon", price: 20 },
  { name: "üçì Strawberry", price: 60 },
];

const statuses = ["üåø Fresh", "üçÉ Ripe", "‚ö†Ô∏è Almost gone", "‚ùå Out of stock"];

const imageAttachmentUrl = "https://i.imgur.com/Bkb0kDB.jpeg";

let autoPostInterval = null;

function getRandomInt(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

function getProgressBar(score, max = 200) {
  const totalBars = 20;
  const filledBars = Math.min(Math.floor((score / max) * totalBars), totalBars);
  const emptyBars = totalBars - filledBars;
  return "‚ñà".repeat(filledBars) + "‚ñë".repeat(emptyBars);
}

function getMedal(score) {
  for (const medal of medals) {
    if (score >= medal.score) return medal.emoji;
  }
  return "üèÖ";
}

function generateGagStockData() {
  const fruit = fruitsList[getRandomInt(0, fruitsList.length - 1)];
  const status = statuses[getRandomInt(0, statuses.length - 1)];
  const priceFluctuation = getRandomInt(-5, 5);
  const price = Math.max(fruit.price + priceFluctuation, 5);
  return { fruit: fruit.name, price, status };
}

function buildPostMessage(userName, fruitData, score) {
  const medal = getMedal(score);
  const progressBar = getProgressBar(score);

  return `
üå± **GagStock Tracker Update**

üçâ Fruit: ${fruitData.fruit}
üí∞ Price: ‚Ç±${fruitData.price}
üìä Status: ${fruitData.status}

üë§ Posted by: *${userName}*
üèÜ Score: ${score} ${medal}
üìà Progress: \`${progressBar}\`

Keep growing your garden and collect more fruits! üåø
`;
}

async function postGagStockUpdate(api, threadID, userID, userName) {
  const fruitData = generateGagStockData();
  const gainPoints = getRandomInt(5, 15);
  usersScore[userID] = (usersScore[userID] || 0) + gainPoints;
  const score = usersScore[userID];

  const message = buildPostMessage(userName, fruitData, score);

  const attachment = {
    type: "photo",
    url: imageAttachmentUrl,
  };

  const postUrl = await api.createPost({
    body: message,
    attachment: attachment,
  });

  if (!postUrl) {
    await api.sendMessage(
      "‚ö†Ô∏è Post was created but no URL was returned by API.",
      threadID
    );
    return;
  }

  await api.sendMessage(
    `‚úÖ GagStock update posted by *${userName}*!\nüîó [Click here to view the post](${postUrl})`,
    threadID
  );

  if (score >= 200) {
    await api.sendMessage(
      `üéâ Congratulations *${userName}*! You've leveled up with a score of ${score} and earned the ${getMedal(score)}! Keep it up! üèÖ`,
      threadID
    );
  }

  let topUserID = null;
  let topScore = 0;
  for (const uid in usersScore) {
    if (usersScore[uid] > topScore) {
      topUserID = uid;
      topScore = usersScore[uid];
    }
  }

  const topUserName = topUserID === userID ? userName : "Another User";

  await api.sendMessage(
    `üî• Top User: *${topUserName}* with score: ${topScore} ${getMedal(topScore)}`,
    threadID
  );
}

module.exports.run = async function ({ api, event, args }) {
  const { threadID, senderID, senderName } = event;

  const action = (args[0] || "").toLowerCase();

  if (action === "on") {
    if (autoPostInterval) {
      return api.sendMessage("‚ö†Ô∏è Auto GagStock posting is already running.", threadID);
    }

    api.sendMessage("‚úÖ Auto GagStock posting started! Posting every 3 minutes...", threadID);

    autoPostInterval = setInterval(async () => {
      try {
        await postGagStockUpdate(api, threadID, senderID, senderName);
      } catch (e) {
        console.error("‚ùå Auto post error:", e);
        api.sendMessage("‚ùå An error occurred during auto-posting.", threadID);
      }
    }, 180000);

    return;
  }

  if (action === "off") {
    if (!autoPostInterval) {
      return api.sendMessage("‚ö†Ô∏è Auto posting is not running.", threadID);
    }

    clearInterval(autoPostInterval);
    autoPostInterval = null;
    return api.sendMessage("‚èπÔ∏è Auto GagStock posting stopped.", threadID);
  }

  api.sendMessage(
    "‚ö†Ô∏è Invalid usage! Use:\n‚Ä¢ autogagstock on ‚Äî to start auto-post\n‚Ä¢ autogagstock off ‚Äî to stop auto-post",
    threadID
  );
};
