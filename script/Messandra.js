const axios = require('axios');

function convertToBold(text) {
  const boldMap = {
    'a': 'ùóÆ','b': 'ùóØ','c': 'ùó∞','d': 'ùó±','e': 'ùó≤','f': 'ùó≥','g': 'ùó¥','h': 'ùóµ','i': 'ùó∂','j': 'ùó∑',
    'k': 'ùó∏','l': 'ùóπ','m': 'ùó∫','n': 'ùóª','o': 'ùóº','p': 'ùóΩ','q': 'ùóæ','r': 'ùóø','s': 'ùòÄ','t': 'ùòÅ',
    'u': 'ùòÇ','v': 'ùòÉ','w': 'ùòÑ','x': 'ùòÖ','y': 'ùòÜ','z': 'ùòá',
    'A': 'ùóî','B': 'ùóï','C': 'ùóñ','D': 'ùóó','E': 'ùóò','F': 'ùóô','G': 'ùóö','H': 'ùóõ','I': 'ùóú','J': 'ùóù',
    'K': 'ùóû','L': 'ùóü','M': 'ùó†','N': 'ùó°','O': 'ùó¢','P': 'ùó£','Q': 'ùó§','R': 'ùó•','S': 'ùó¶','T': 'ùóß',
    'U': 'ùó®','V': 'ùó©','W': 'ùó™','X': 'ùó´','Y': 'ùó¨','Z': 'ùó≠',
  };
  return text.split('').map(char => boldMap[char] || char).join('');
}

const responseOpeners = [
  "ùôÇùôãùôè 3.5"
];

module.exports.config = {
  name: 'messandra',
  version: '1.1.7',
  hasPermission: 0,
  usePrefix: false,
  aliases: ['gpt', 'lorex'],
  description: "An AI command powered by Gemini Vision",
  usages: "ai [prompt]",
  credits: 'LorexAi',
  cooldowns: 0
};

const bannedUsers = {}; 
const BAN_DURATION = 4 * 60 * 60 * 1000; // 4 hours in ms
const MAX_PROMPT_LENGTH = 200;
const MAX_ANSWERS = 3;

const userRequestCounts = {}; 
// Format: { userID: { count: number, lastReset: timestamp } }

async function sendTemp(api, threadID, message) {
  return new Promise(resolve => {
    api.sendMessage(message, threadID, (err, info) => resolve(info));
  });
}

function resetUserCountIfNeeded(uid) {
  const now = Date.now();
  if (!userRequestCounts[uid]) {
    userRequestCounts[uid] = { count: 0, lastReset: now };
    return;
  }
  // Reset count if lastReset more than BAN_DURATION ago
  if (now - userRequestCounts[uid].lastReset > BAN_DURATION) {
    userRequestCounts[uid] = { count: 0, lastReset: now };
  }
}

module.exports.run = async function({ api, event, args }) {
  const input = args.join(' ');
  const uid = event.senderID;
  const threadID = event.threadID;
  const messageID = event.messageID;

  const now = Date.now();

  // Check if banned
  if (bannedUsers[uid]) {
    if (now < bannedUsers[uid]) {
      const remaining = Math.ceil((bannedUsers[uid] - now) / (60 * 1000)); // minutes left
      return api.sendMessage(`üö´ You are temporarily banned for exceeding the allowed number of requests. Please wait ${remaining} minute(s) before trying again.`, threadID, messageID);
    } else {
      delete bannedUsers[uid]; // Ban expired
      userRequestCounts[uid] = { count: 0, lastReset: now }; // Reset count after ban
    }
  }

  resetUserCountIfNeeded(uid);

  // Check prompt length
  if (input.length > MAX_PROMPT_LENGTH) {
    bannedUsers[uid] = now + BAN_DURATION;
    return api.sendMessage(`‚ùå Your prompt is too long! You are now banned for 4 hours. Please limit your input to ${MAX_PROMPT_LENGTH} characters.`, threadID, messageID);
  }

  // Check answer limit
  if (userRequestCounts[uid].count >= MAX_ANSWERS) {
    bannedUsers[uid] = now + BAN_DURATION;
    return api.sendMessage(`üö´ You have reached the maximum number of ${MAX_ANSWERS} requests. You are now banned for 4 hours. Please wait before trying again.`, threadID, messageID);
  }

  const isPhotoReply = event.type === "message_reply"
    && Array.isArray(event.messageReply?.attachments)
    && event.messageReply.attachments.some(att => att.type === "photo");

  if (isPhotoReply) {
    const photoUrl = event.messageReply.attachments?.[0]?.url;
    if (!photoUrl) return api.sendMessage("‚ùå Could not get image URL.", threadID, messageID);
    if (!input) return api.sendMessage("üì∏ Please provide a prompt along with the image.", threadID, messageID);

    // Increase count for each request
    userRequestCounts[uid].count++;

    const tempMsg = await sendTemp(api, threadID, "üîç Analyzing image...");

    try {
      const { data } = await axios.get('https://daikyu-api.up.railway.app/api/gemini-pro', {
        params: {
          ask: input,
          uid: uid,
          imageURL: photoUrl
        }
      });

      if (data?.reply) {
        const opener = responseOpeners[Math.floor(Math.random() * responseOpeners.length)];
        return api.editMessage(`${opener}\n\n${data.reply}`, tempMsg.messageID, threadID);
      }

      return api.editMessage("‚ö†Ô∏è Unexpected response from Vision API.", tempMsg.messageID, threadID);
    } catch (err) {
      console.error(err);
      return api.editMessage("‚ùå Error analyzing image.", tempMsg.messageID, threadID);
    }
  }

  if (!input) {
    return api.sendMessage(`üî∑Hello! I am MESSANDRA, an AI assistant powered by OpenAI's GPT-4o technology. I'm here to help you with a variety of tasks, including:

- Answering questions
- Analyzing images (reply with an image + prompt)
- Helping with code, writing, ideas, and more

Send a prompt to get started!`, threadID, messageID);
  }

  // Increase count for each request
  userRequestCounts[uid].count++;

  const tempMsg = await sendTemp(api, threadID, "üîÑSearching....");

  try {
    const { data } = await axios.get('https://daikyu-api.up.railway.app/api/gpt-4o', {
      params: {
        query: input,
        uid: uid
      }
    });

    if (!data?.response) {
      return api.editMessage("‚ùå No response received. Try again.", tempMsg.messageID, threadID);
    }

    const formatted = data.response
      .replace(/\*\*(.*?)\*\*/g, (_, t) => convertToBold(t))
      .replace(/##(.*?)##/g, (_, t) => convertToBold(t))
      .replace(/###\s*/g, '')
      .replace(/\n{3,}/g, '\n\n');

    const opener = responseOpeners[Math.floor(Math.random() * responseOpeners.length)];
    return api.editMessage(`${opener}\n\n${formatted}`, tempMsg.messageID, threadID);

  } catch (err) {
    console.error(err);
    return api.editMessage("‚ö†Ô∏è Something went wrong. Try again later.", tempMsg.messageID, threadID);
  }
};
