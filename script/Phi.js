const axios = require("axios");
const fs = require("fs-extra");
const path = require("path");

const settingsFile = path.join(__dirname, "phi_settings.json");
const adminID = "61580959514473";
let conversationHistory = {};
let maintenanceMode = false;

const defaultSettings = {
  autoReact: true,
  boldFormat: true,
  fastMode: true,
  safeMode: true,
  profanityFilter: true,
  conversationMemory: true,
  emojiDecor: true,
  timestamp: true,
  maintenanceMode: false,
  logging: true,
  typingEdit: false,
  groupAdmin: true,
  allowKick: true,
  allowAddUser: true,
  allowRules: true,
  imageGeneration: true,
  imageEdit: true,
  poliMode: true,
  imageAnalyze: true,
  smartReply: true,
  compactOutput: false,
  showTips: true,
  errorRetry: true,
  fastResponse: true,
  maintenanceLock: false,
  ruleReminder: true,
  kickNotice: true,
  respondWithPersonality: true,
  aiHumor: true,
  aiSummarize: false,
  safeLinks: true,
  userJoinGreet: true,
  groupOnly: false,
  commandLog: true,
  adminBypass: true,
  pinRules: false,
  allowMediaResponse: true,
  autoHelp: true
};

function loadSettings() {
  if (!fs.existsSync(settingsFile))
    fs.writeJsonSync(settingsFile, defaultSettings, { spaces: 2 });
  return fs.readJsonSync(settingsFile);
}

function saveSettings(settings) {
  fs.writeJsonSync(settingsFile, settings, { spaces: 2 });
}

function bold(text) {
  const map = { a:'ùóÆ',b:'ùóØ',c:'ùó∞',d:'ùó±',e:'ùó≤',f:'ùó≥',g:'ùó¥',h:'ùóµ',i:'ùó∂',j:'ùó∑',k:'ùó∏',l:'ùóπ',m:'ùó∫',n:'ùóª',o:'ùóº',p:'ùóΩ',q:'ùóæ',r:'ùóø',s:'ùòÄ',t:'ùòÅ',u:'ùòÇ',v:'ùòÉ',w:'ùòÑ',x:'ùòÖ',y:'ùòÜ',z:'ùòá' };
  return text.split("").map(ch => map[ch.toLowerCase()] || ch).join("");
}

module.exports.config = {
  name: "phi",
  version: "10.1.0",
  hasPermission: 0,
  usePrefix: false,
  aliases: ["phiai", "phi-pro", "phi10"],
  description: "PHI AI PRO v10 ‚Äî Smart Chat + Group Admin + Settings System",
  usages: "phi [tanong/settings/kick/adduser/rules/update]",
  credits: "SwordSlush x Daikyu x Zetsu",
  cooldowns: 0
};

module.exports.run = async ({ api, event, args }) => {
  const threadID = event.threadID;
  const messageID = event.messageID;
  const uid = event.senderID;
  let settings = loadSettings();
  let query = args.join(" ");
  const isAdmin = uid === adminID;

  // üõ†Ô∏è Maintenance Mode
  if (args[0]?.toLowerCase() === "maintaince" && isAdmin) {
    const toggle = args[1]?.toLowerCase();
    maintenanceMode = toggle === "on";
    return api.sendMessage(`üõ†Ô∏è Maintenance ${maintenanceMode ? "Activated" : "Deactivated"}`, threadID, messageID);
  }
  if (maintenanceMode && !isAdmin)
    return api.sendMessage("üöß PHI AI PRO is currently under maintenance.", threadID, messageID);

  // ‚öôÔ∏è Settings Panel
  if (args[0]?.toLowerCase() === "settings") {
    if (args[1]?.toLowerCase() === "list") {
      const list = Object.entries(settings)
        .map(([k, v]) => `${v ? "‚úÖ" : "‚ùå"} ${k}`)
        .join("\n");
      return api.sendMessage(`‚öôÔ∏è ùó£ùóõùóú ùó£ùó•ùó¢ ùó¶ùó≤ùòÅùòÅùó∂ùóªùó¥ùòÄ\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n${list}`, threadID, messageID);
    }
    const feature = args[1];
    const value = args[2]?.toLowerCase();
    if (!isAdmin)
      return api.sendMessage("‚ö†Ô∏è Only admin can change settings.", threadID, messageID);
    if (!(feature in settings))
      return api.sendMessage(`‚ùå Feature "${feature}" not found.`, threadID, messageID);
    settings[feature] = value === "on";
    saveSettings(settings);
    return api.sendMessage(`‚úÖ ${feature} turned ${value.toUpperCase()}.`, threadID, messageID);
  }

  // üîÑ Update / Version Info
  if (args[0]?.toLowerCase() === "update" || args[0]?.toLowerCase() === "version") {
    const updateMessage = [
      "üí† *PHI AI PRO ‚Äî Version History*",
      "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
      "",
      "üÜï *v10.1.0 (Current)*",
      "üîπ New API Endpoint integrated",
      "üîπ Faster response engine",
      "üîπ Rebranded from Aria to PHI AI",
      "",
      "‚öôÔ∏è *v10.0.0*",
      "üîπ 39 Settings System added",
      "üîπ Group Admin features (kick, adduser, rules)",
      "üîπ AI Humor + Profanity Filter",
      "",
      "‚ú® *Powered by PHI AI x SwordSlush*"
    ].join("\n");

    return api.sendMessage(updateMessage, threadID, messageID);
  }

  // üëÆ Group Admin Commands
  if (settings.groupAdmin && event.isGroup) {
    // Kick user
    if (args[0]?.toLowerCase() === "kick" && settings.allowKick) {
      if (!event.messageReply)
        return api.sendMessage("‚ö†Ô∏è Reply to a user to kick them.", threadID, messageID);
      const target = event.messageReply.senderID;
      try {
        await api.removeUserFromGroup(target, threadID);
        return api.sendMessage(`üë¢ User removed successfully.`, threadID, messageID);
      } catch {
        return api.sendMessage("‚ùå Unable to remove user. Check permissions.", threadID, messageID);
      }
    }

    // Add user
    if (args[0]?.toLowerCase() === "adduser" && settings.allowAddUser) {
      const userID = args[1];
      if (!userID)
        return api.sendMessage("‚ö†Ô∏è Provide a UID to add.", threadID, messageID);
      try {
        await api.addUserToGroup(userID, threadID);
        return api.sendMessage(`üë§ User ${userID} added to group.`, threadID, messageID);
      } catch {
        return api.sendMessage("‚ùå Failed to add user.", threadID, messageID);
      }
    }

    // Rules
    if (args[0]?.toLowerCase() === "rules" && settings.allowRules) {
      return api.sendMessage(
        `üìú ùóöùóøùóºùòÇùóΩ ùó•ùòÇùóπùó≤ùòÄ\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n1. No spamming\n2. No bullying\n3. Respect others\n4. Keep chat clean\n5. Follow admin instructions`,
        threadID,
        messageID
      );
    }
  }

  // üí¨ Main PHI Chat
  if (!query)
    return api.sendMessage(
      "ü§ñ PHI AI PRO v10.1.0 is online!\nType your question or use:\n`phi settings list`, `phi rules`, `phi kick`, `phi adduser`, `phi update`",
      threadID,
      messageID
    );

  if (settings.autoReact) api.setMessageReaction("üöÄ", messageID, () => {}, true);

  try {
    // ‚úÖ Updated API Endpoint
    const { data } = await axios.get(
      `https://betadash-api-swordslush-production.up.railway.app/phi?ask=${encodeURIComponent(query)}`
    );

    let response = data.response || data.answer || "‚ö†Ô∏è Walang sagot mula sa PHI API.";
    if (settings.boldFormat) response = response.replace(/\*\*(.*?)\*\*/g, (_, t) => `ùóõùó∂ùó¥ùóµùóπùó∂ùó¥ùóµùòÅ: ${t}`);

    const msg = `üí† ùó£ùóõùóú ùó£ùó•ùó¢ (${settings.fastMode ? "‚ö° Fast" : "Normal"})\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n${response}`;
    api.sendMessage(msg, threadID, () => {
      if (settings.autoReact) api.setMessageReaction("üí°", messageID, () => {}, true);
    });

  } catch (e) {
    console.error("PHI API Error:", e.message);
    api.sendMessage("‚ùå PHI API error. Please try again later.", threadID, messageID);
  }
};
